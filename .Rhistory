library(RMySQL)
mydb <- DBI::dbConnect(MySQL(), dbname='bi', user='root', password='P@ntera6', host='127.0.0.1')
dbListTables(mydb)
install.packages("RMySQL")
mydb <- DBI::dbConnect(MySQL(), dbname='bi', user='root', password='P@ntera6', host='127.0.0.1')
dbListTables(mydb)
branch_table <-
data.frame(key=c("UK", "USA", "AUS", "CN", "ZA"),
city=c("London", "New York", "Sydney", "Shanghai", "Johannesburg"),
country=c("UK", "USA", "Australia", "China", "South Africa"))
dbWriteTable(mydb, name='branch_table', value=branch_table)
product_table <-
data.frame(key=1:4,
product=c("kettle","fryer", "toaster","iron"),
price=c(20,90,60,80))
View(branch_table)
product_table <-
data.frame(key=1:4,
product=c("kettle","fryer", "toaster","iron"),
price=c(20,90,60,80))
dbWriteTable(mydb, name='product_table', value=product_table)
month_table <-
data.frame(key=1:12,
year=c("2010")
month=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
year=c("Q1","Q1","Q1","Q2","Q2","Q2","Q3","Q3","Q3","Q4","Q4","Q4"))
month_table <-
data.frame(key=1:12,
month=c("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"),
year=c("Q1","Q1","Q1","Q2","Q2","Q2","Q3","Q3","Q3","Q4","Q4","Q4"))
dbWriteTable(mydb, name='month_table', value=month_table)
gen_sales <- function(no_of_recs) {
loc <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
loc=loc,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
}
sales_table <- gen_sales(500)
sales_table
head(sales_table)
revenue_cube <-
tapply(sales_table$amount,
sales_table[,c("product", "month", "year", "loc")],
FUN=function(x){return(sum(x))})
revenue_cube
revenue_cube
dimnames(revenue_cube)
gen_sales <- function(no_of_recs) {
branch <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
branch=branch,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
#generate the Sales table
gen_sales <- function(no_of_recs) {
branch <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
branch=branch,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
}
gen_sales <- function(no_of_recs) {
branch <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
branch=branch,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
}
#generate sales table
sales_table <- gen_sales(500)
sales_table
sales_table
gen_sales <- function(no_of_recs) {
branch <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
branch=branch,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
}
gen_sales <- function(no_of_recs) {
branch <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
branch=branch,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
}
#generate sales table
sales_table <- gen_sales(500)
sales_table
head(sales_table)
View(gen_sales)
View(gen_sales)
stop()
clos
close
exit
mydb <- DBI::dbConnect(MySQL(), dbname='bi', user='root', password='P@ntera6', host='127.0.0.1')
dbListTables(mydb)
#create branches
branch_table <-
data.frame(key=c("UK", "USA", "AUS", "CN", "ZA"),
city=c("London", "New York", "Sydney", "Shanghai", "Johannesburg"),
country=c("UK", "USA", "Australia", "China", "South Africa"))
}
gen_sales <- function(no_of_recs) {
branch <- sample(branch_table$key, no_of_recs,
replace=T, prob=c(2,2,1,2,1))
time_month <- sample(month_table$key, no_of_recs, replace=T)
time_year <- sample(c(2010, 2011, 2012, 2013, 2014, 2015), no_of_recs, replace=T)
product <- sample(product_table$key, no_of_recs, replace=T, prob=c(1, 4, 2, 3))
unit <- sample(c(1,2), no_of_recs, replace=T, prob=c(10, 3))
amount <- unit*product_table[product,]$price
sales <- data.frame(month=time_month,
year=time_year,
branch=branch,
product=product,
unit=unit,
amount=amount)
# Sort the records by time order
sales <- sales[order(sales$year, sales$month),]
row.names(sales) <- NULL
return(sales)
}
#generate sales table
sales_table <- gen_sales(500)
sales_table
head(sales_table)
revenue_cube <-
tapply(sales_table$amount,
sales_table[,c("product", "month", "year", "branch")],
FUN=function(x){return(sum(x))})
revenue_cube
dimnames(revenue_cube)
#Slice and dice
revenue_cube[,"3","2015"]
#Slice and dice
revenue_cube[,"3","2014"]
#Slice and dice
revenue_cube[,"3","2014",]
#Slice and dice
revenue_cube[,"3","2015",]
#Slice and dice
revenue_cube[,"5","2015",]
#Slice and dice
revenue_cube[,"5","2012",]
#Slice and dice
revenue_cube[,"5","2011",]
#Slice and dice
revenue_cube[,"1","2011",]
#Slice
revenue_cube["UK","1","2011",]
#Slice
revenue_cube[,"UK","1","2011",]
#Slice
revenue_cube["UK","1","2011",]
#Slice
revenue_cube["UK", ,"1","2011",]
#Slice
revenue_cube[,"1","2011",]
#Slice
revenue_cube[,"UK","2011",]
#Slice
revenue_cube[,"AUS","2011",]
#Slice
revenue_cube[,"6","2011","kettle"]
#Slice
revenue_cube[,"6","2011","kettle",]
#Slice
revenue_cube["kettle","6","2011",]
#Slice
revenue_cube["1","6","2011",]
#Slice
revenue_cube["1","5","2011",]
#Slice
revenue_cube["1",,"2011",]
#Slice
revenue_cube["1", ,"2012",]
#Slice
revenue_cube["3", ,"2012",]
revenue_cube[c("1","2","3"),
c("1","12"),
c("2010", "2015"),
]
revenue_cube[c("1","2","3"),
c("1","12"),
c("2010"),
c("ZA")
]
apply(revenue_cube, c("year", "product"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "product"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "product","year"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "product","amount"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "amount"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "product$amount"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "product"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "month", "prod"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "prod"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "product"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "product=1"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "product"[,"1"]),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "product"["1"]),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "product"[1]),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("branch", "year", "product"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("month", "year", "product"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("product", "branch"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
apply(revenue_cube, c("year", "branch"),
FUN=function(x) {return(sum(x, na.rm=TRUE))})
#Improved CART Model
set.seed(3333)
cart_tree_model <- train(defaulted ~., data = training, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 37)
)
cart_tree_model_gini <- train(defaulted ~., data = training, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 37)
cart_tree_model_gini
head(cart_tree_model_gini)
cart_tree_model_gini
print(cart_tree_model)
print(cart_tree_model_gini)
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing)
confusionMatrix(cart_gini_prediction, testing$defaulted )  #check accuracy
confusionMatrix(cart_gini_prediction, numeric_label)  #check accuracy
ionMatrix(cart_gini_prediction, num
confusionMatrix(cart_gini_prediction, numeric_label)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing)
confusionMatrix(cart_gini_prediction, numeric_label)  #check accuracy
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
#Improved CART Model
set.seed(3333)
cart_tree_model_gini <- train(defaulted~., data = training, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 150)
cart_tree_model_gini
#Improved CART Model
set.seed(3333)
cart_tree_model_gini <- train(defaulted~., data = training, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 15)
cart_tree_model_gini
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17], type="class")
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17], type="raw")
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17], type="prop")
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17], type="prob")
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17], type="prob")
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
confusionMatrix(cart_gini_prediction, numeric_label)  #check accuracy
cart_gini_prediction
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17], type="class")
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
testing[-17]
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
cart_gini_prediction
confusionMatrix(cart_gini_prediction, numeric_label)  #check accuracy
confusionMatrix(cart_gini_prediction, testing$predictscore)  #check accuracy
confusionMatrix(cart_gini_prediction, testing$defaulted)  #check accuracy
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
#pruning
printcp(cart_gini_prediction)
#pruning
printcp(cart_gini_prediction)
#pruning
printcp(cart_tree_model_gini)
#Improved CART Model
set.seed(3333)
cart_tree_model_gini <- train(defaulted~., data = training, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 15)
#pruning
printcp(cart_tree_model_gini)
printcp(cart_tree_model)
#pruning
pruned_tree <- rpart(defaulted~.,data=training,method = 'class')
printcp(pruned_tree)
opt  <-  which.min(pruned_tree$cptable[,'xerror'])
cp <-  pruned_tree$cptable[opt, 'CP']
pruned_model <-  prune(pruned_tree,cp)
rpart.plot(pruned_model, box.col=c("blue", "yellow"))
#pruning
training
#pruning
training_new <- training[,-training$predictscore]
training_new
#pruning
training_new <- training[-training$predictscore]
#pruning
training_new <- training[-18]
training_new
pruned_tree <- rpart(defaulted~.,data=training_new,method = 'class')
printcp(pruned_tree)
opt  <-  which.min(pruned_tree$cptable[,'xerror'])
cp <-  pruned_tree$cptable[opt, 'CP']
pruned_model <-  prune(pruned_tree,cp)
rpart.plot(pruned_model, box.col=c("blue", "yellow"))
testing_new <- testing[-18]
#Improved CART Model
set.seed(3333)
cart_tree_model_gini <- train(defaulted~., data = training_new, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 15)
cart_tree_model_gini
#pruning
training_old <- training
testing_old <- testing
training <- training[-18]
testing <- testing[-18]
pruned_tree <- rpart(defaulted~.,data=training,method = 'class')
printcp(pruned_tree)
opt  <-  which.min(pruned_tree$cptable[,'xerror'])
cp <-  pruned_tree$cptable[opt, 'CP']
pruned_model <-  prune(pruned_tree,cp)
rpart.plot(pruned_model, box.col=c("blue", "yellow"))
rpart_pruned_predict <- predict(pruned_model, newdata=testing[-17],type = 'class')
auc(cart_prediction, numeric_label)
ConfusionMatrix(rpart_pruned_predict==testing$defaulted)
ConfusionMatrix(rpart_pruned_predict,testing$defaulted)
confusionMatrix(rpart_pruned_predict,testSet$Species)
confusionMatrix(rpart_pruned_predict,testing$defaulted)
auc(rpart_pruned_predict, testing$defaulted)
numeric_label
auc(rpart_pruned_predict, numeric_label)
actualValue <- as.numeric(testing$defaulted)
auc(rpart_pruned_predict, actualValue)
f1_cart <- data.frame(rpart_pruned_predict, testing$defaulted)
f1_cart
F1_Score(f1_cart$cart_prediction, f1_cart$testing.defaulted, positive ="no")
f1_cart <- data.frame(rpart_pruned_predict, testing$defaulted)
f1_cart
testing.defaulted
F1_Score(f1_cart$rpart_pruned_predict, f1_cart$testing.defaulted, positive ="no")
#Train decision tree
c50_tree_model <- C5.0(defaulted ~., data=training)
#C5.0 algoritm
install.packages("C50")
library(C50)
#Train decision tree
c50_tree_model <- C5.0(defaulted ~., data=training)
#test
c50_tree_testing <- predict(object=c50_tree_model, newdata=testing[-17], type="class")
summary(c50_tree_model)
c50_tree_model
#test
c50_tree_testing <- predict(object=c50_tree_model, newdata=testing[-17], type="class")
plot(c50_tree_model)
install.packages("caret")
library(caret)
#confusion matrix
confusionMatrix(c50_tree_testing, testing$defaulted)
training
#confusion matrix
confusionMatrix(c50_tree_testing, testing$defaulted)
auc(c50_tree_testing, actualValue)
#data fram is needed
f1 <- data.frame(c50_tree_testing, testing$defaulted)
f1
F1_Score(f1$c50_tree_testing, f1$testing.defaulted, positive ="no")
#CART TREE V2
?trainControl
trctrl <- trainControl(method = "repeatedcv", number = 17, repeats = 3)
set.seed(3333)
cart_tree_model <- train(defaulted ~., data = training, method = "rpart",
parms = list(split = "information"),
trControl=trctrl,
tuneLength = 10)
cart_tree_model
print(cart_tree_model)
testing
cart_prediction <- predict(cart_tree_model, newdata = testing[-17])
confusionMatrix(cart_prediction, testing$defaulted )  #check accuracy
auc(cart_prediction, actualValue)
f1_cart <- data.frame(cart_prediction, testing$defaulted)
f1_cart
F1_Score(f1_cart$cart_prediction, f1_cart$testing.defaulted, positive ="no")
#Improved CART Model
set.seed(3333)
cart_tree_model_gini <- train(defaulted~., data = training_new, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 15)
cart_tree_model_gini
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
confusionMatrix(cart_gini_prediction, testing$defaulted)
#Improved CART Model
set.seed(3333)
cart_tree_model_gini <- train(defaulted~., data = training_new, method = "rpart",
parms = list(split = "gini"),
trainControl("cv", number = 10),
tuneLength = 10)
cart_tree_model_gini <- train(defaulted~., data = training_new, method = "rpart",
parms = list(split = "gini"),
trControl=trctrl,
tuneLength = 37)
cart_tree_model_gini$bestTune
cart_gini_prediction <- predict(cart_tree_model_gini, newdata = testing[-17])
cart_gini_prediction
confusionMatrix(cart_gini_prediction, testing$defaulted)
printcp(cart_tree_model)
class(cart_tree_model)
str(cart_tree_model)
pruned_tree <- rpart(defaulted~.,data=training,method = 'class')
printcp(pruned_tree)
opt  <-  which.min(pruned_tree$cptable[,'xerror'])
cp <-  pruned_tree$cptable[opt, 'CP']
pruned_model <-  prune(pruned_tree,cp)
rpart.plot(pruned_model, box.col=c("blue", "yellow"))
rpart_pruned_predict <- predict(pruned_model, newdata=testing[-17],type = 'class')
confusionMatrix(rpart_pruned_predict,testing$defaulted)
